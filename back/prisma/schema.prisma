// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id        					String   		@id @default(uuid())
	email     					String   		@unique
	username					String   		@unique
	password 					String
	firstName 					String
	lastName  					String
	gender						Gender
	role						Role			@default(USER)
	sexualPreferences			Gender[]
	bio							String
	interests					String[]
	pictures					Picture[]
	likedBy						Like[]			@relation("likedBy")
	likedUsers					Like[]			@relation("likedUsers")
	location					Location?
	age							Int
	visitedUsers				Visit[]			@relation("visitedUsers")
	visitors					Visit[]			@relation("visitors")

	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@updatedAt
}

model Location {
	id        					String   		@id @default(uuid())
	latitude					Float
	longitude					Float

	user						User  			@relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	userId						String			@unique

	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@updatedAt
}

model Visit {
	id        					String   		@id @default(uuid())

	visitedBy					User  			@relation(fields: [visitedById], references: [id], name: "visitedUsers", onUpdate: Cascade, onDelete: Cascade)
	visitedById					String

	visitedUser					User  			@relation(fields: [visitedUserId], references: [id], name: "visitors", onUpdate: Cascade, onDelete: Cascade)
	visitedUserId				String

	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@updatedAt
}

model Picture {
	id        					String   		@id @default(uuid())
	url							String
	likes						Like[]

	user						User  			@relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	userId						String

	
	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@updatedAt
}

model Like {
	id        					String   		@id @default(uuid())

	likedBy						User  			@relation(fields: [likedById], references: [id], name: "likedBy", onUpdate: Cascade, onDelete: Cascade)
	likedById					String

	likedUser					User  			@relation(fields: [likedUserId], references: [id], name: "likedUsers", onUpdate: Cascade, onDelete: Cascade)
	likedUserId					String

	picture						Picture  		@relation(fields: [pictureId], references: [id], onUpdate: Cascade, onDelete: Cascade)
	pictureId					String

	createdAt 					DateTime 		@default(now())
	updatedAt 					DateTime 		@updatedAt
}

enum Role {
	USER
	ADMIN
}

enum Gender {
	MALE
	FEMALE
	OTHER
}